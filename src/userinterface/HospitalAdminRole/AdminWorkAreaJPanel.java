

package userinterface.HospitalAdminRole;


import Business.Patient.Patient;
import Business.EcoSystem;
import Business.Government.Government;
import Business.Hospital.Hospital;
import Business.UserAccount.UserAccount;
import Business.Vaccine.VaccineProduct;
import Business.Vaccine.VaccineProduct.VaccineType;
import Business.Vaccine.VaccineProductDirectory;
import Business.WorkQueue.AlertShortage;
import Business.WorkQueue.BookingRequest;
import Business.WorkQueue.WorkQueue;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.Iterator;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import userinterface.SystemAdminWorkArea.ManageHospitalsJPanel;


/**
 *
 * @author  raunak
 */
public class AdminWorkAreaJPanel extends javax.swing.JPanel {
    
    JPanel userProcessContainer;
    JFrame frame = new JFrame("Inventory Shortage Alert!");
    EcoSystem system;
    UserAccount ua;
    BookingRequest br;
    Government gov;
    ArrayList<Patient> pList = new ArrayList<>();
    ArrayList<VaccineProduct> vList = new ArrayList<>();
    VaccineProductDirectory vaccineDirectory;
    
    Hospital hosp = new Hospital();
    
    
    /** Creates new form AdminWorkAreaJPanel */
    public AdminWorkAreaJPanel(JPanel userProcessContainer, EcoSystem system, UserAccount ua) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.system = system;
        this.ua = ua;
        populateHospitalName();
        populatePatientWorkRequestJTable();
        populateVaccineCount();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        manageEmployeeJButton = new javax.swing.JButton();
        manageOrganizationJButton = new javax.swing.JButton();
        enterpriseLabel = new javax.swing.JLabel();
        valueLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        patientWorkRequestJTable = new javax.swing.JTable();
        btnAdministerVaccines = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        valueLabel1 = new javax.swing.JLabel();
        enterpriseLabel1 = new javax.swing.JLabel();
        lblOrderRequestStatus = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("My Work Area -Adminstrative Role");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 0, -1, -1));

        manageEmployeeJButton.setText("Manage Vaccines");
        manageEmployeeJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageEmployeeJButtonActionPerformed(evt);
            }
        });
        add(manageEmployeeJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 550, 150, -1));

        manageOrganizationJButton.setText("Manage Patients");
        manageOrganizationJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageOrganizationJButtonActionPerformed(evt);
            }
        });
        add(manageOrganizationJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 550, -1, -1));

        enterpriseLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        enterpriseLabel.setText("Hospital :");
        add(enterpriseLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 120, 30));

        valueLabel.setText("<value>");
        add(valueLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 50, 130, -1));

        patientWorkRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Patient ID", "Patient Name", "Vaccine Type Needed"
            }
        ));
        jScrollPane2.setViewportView(patientWorkRequestJTable);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 90, 390, 180));

        btnAdministerVaccines.setText("Administer Vaccines");
        btnAdministerVaccines.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdministerVaccinesActionPerformed(evt);
            }
        });
        add(btnAdministerVaccines, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 290, 250, 70));

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });
        add(btnRefresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 0, -1, -1));

        valueLabel1.setText("<value>");
        add(valueLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 60, 130, -1));

        enterpriseLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        enterpriseLabel1.setText("Vaccine Count:");
        add(enterpriseLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 50, 140, 30));

        lblOrderRequestStatus.setText("<value>");
        add(lblOrderRequestStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 460, 130, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void manageEmployeeJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageEmployeeJButtonActionPerformed
        ManageVaccinesJPanel manageVaccinesJPanels = new ManageVaccinesJPanel(userProcessContainer, ua, system);
        userProcessContainer.add("manageVaccinesJPanels", manageVaccinesJPanels);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_manageEmployeeJButtonActionPerformed

    private void manageOrganizationJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageOrganizationJButtonActionPerformed

        ManagePatientsJPanel managePatientsJPanel = new ManagePatientsJPanel(userProcessContainer, ua, system);
        userProcessContainer.add("managePatientsJPanel", managePatientsJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_manageOrganizationJButtonActionPerformed

    private void btnAdministerVaccinesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdministerVaccinesActionPerformed
        // TODO add your handling code here:
        // 1. check if patient table is populated
        // 2. select patient from table
        //      - check if the work req in the patient is the same one that was received by the HOS
        //      - if true, then make the patient vaccinated, delete the work req from the hospital
        //      - decrease total vaccine count from hospital    
        if(hosp.getVaccineDirectory().getVaccineProductList().isEmpty()){
            int selectedPatientIdRow = patientWorkRequestJTable.getSelectedRow();
            String patientIdInString = patientWorkRequestJTable.getModel().getValueAt(selectedPatientIdRow, 0).toString();
            if (patientWorkRequestJTable.getSelectedRow() >= 0) {
                Patient patient = (Patient) patientWorkRequestJTable.getModel().getValueAt(selectedPatientIdRow, 1);
                WorkRequest patientWorkRequest = patient.getUa().getWorkQueue().getWorkRequestList().get(0);
                if (patientWorkRequest.getReceiver().equals(ua)) {
                    patient.setIsVaccinated(true);
                    ua.getWorkQueue().removeWorkRequest(patientWorkRequest);
                }
            }
            populatePatientWorkRequestJTable();
            removeVaccineFromHospitalVaccineInventory();
            populateVaccineCount();

            for(Hospital h : system.getHospitalDirectory().getHospitalList()){
                if (h.getUserAccount().getUsername().equals(ua.getUsername())) {
                    hosp = h;
                }
            }
        }else{
            JOptionPane.showMessageDialog(null, "No vaccines left.");
        }
        
        if(patientWorkRequestJTable.getRowCount() > hosp.getVaccineDirectory().getVaccineProductList().size()){
            if(hosp.getVaccineDirectory().getVaccineProductList().isEmpty()){
                String[] options = {"Yes", "No"};
                int result = JOptionPane.showOptionDialog(frame, "No Vaccines Left! Order New Batch of Vaccines?", "Inventory Shortage Alert!", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
                if(result == JOptionPane.YES_OPTION){
                   gov = system.getGovernmentDirectory().getGovernment().get(0);

                    WorkRequest workRequest = new WorkRequest() {};
                    workRequest.setSender(ua);
                    workRequest.setReceiver(gov.getUserAccount());

                    ua.getWorkQueue().getWorkRequestList().add(workRequest);
                    gov.getUserAccount().getWorkQueue().addWorkRequest(workRequest);

                   lblOrderRequestStatus.setText("Order Request Sent To Vaccine Macufacturer.");
                }else if (result == JOptionPane.NO_OPTION){
                   lblOrderRequestStatus.setText("Order Not Placed. Shortage Persists :(");
                }else {
                   lblOrderRequestStatus.setText("None selected");
                }
            }
        }else{
            JOptionPane.showMessageDialog(null, "No vaccines left.");
        }
    }//GEN-LAST:event_btnAdministerVaccinesActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:
        populatePatientWorkRequestJTable();
        
    }//GEN-LAST:event_btnRefreshActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdministerVaccines;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JLabel enterpriseLabel;
    private javax.swing.JLabel enterpriseLabel1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblOrderRequestStatus;
    private javax.swing.JButton manageEmployeeJButton;
    private javax.swing.JButton manageOrganizationJButton;
    private javax.swing.JTable patientWorkRequestJTable;
    private javax.swing.JLabel valueLabel;
    private javax.swing.JLabel valueLabel1;
    // End of variables declaration//GEN-END:variables

    private void populateHospitalName() {
        for(Hospital h: system.getHospitalDirectory().getHospitalList()){
            if(h.getUserAccount().getUsername().equals(ua.getUsername())){
                valueLabel.setText(h.getHospitalName());
            }
        }
    }

    private void populatePatientWorkRequestJTable() {
        DefaultTableModel model = (DefaultTableModel) patientWorkRequestJTable.getModel();
        
        model.setRowCount(0);
        
        for(Patient patient: system.getPatientDirectory().getPatientList()) {
            for (WorkRequest wr: ua.getWorkQueue().getWorkRequestList()) {
                if (wr.getSender().equals(patient.getUa().getWorkQueue().getWorkRequestList().get(0).getSender())) {
                    Object[] row = new Object[3];
                    row[0] = patient.getId();
                    row[1] = patient;
                    row[2] = patient.getVaccineType();
                    model.addRow(row);  
                }
            }       
        }         
    }



    private void populateVaccineCount() {
        
        for (Hospital hospital: system.getHospitalDirectory().getHospitalList()) {
            if (hospital.getUserAccount().getUsername().equals(ua.getUsername())) {
                valueLabel1.setText(String.valueOf(hospital.getVaccineDirectory().getVaccineProductList().size()));
            }
        }       
    }
    
    private void removeVaccineFromHospitalVaccineInventory() {
        
        
        for (int i = 0; i < system.getHospitalDirectory().getHospitalList().size(); i++) {
            Hospital h = system.getHospitalDirectory().getHospitalList().get(i);
            int lastVaccine = h.getVaccineDirectory().getVaccineProductList().size()-1;
            VaccineProduct v = h.getVaccineDirectory().getVaccineProductList().get(lastVaccine);
            if (h.getUserAccount().getUsername().equals(ua.getUsername())) {
                h.getVaccineDirectory().removeVaccineProduct(v);
            }
        } 
    }

    
  
}
